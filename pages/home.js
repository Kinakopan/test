import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react';
import { getServerSession, unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import axios from 'axios';

export default function Home() {
  const [thoughts, setThoughts] = useState([]);
  const [title, setTitle] = useState("");
  const [newskeyword, setNewskeyword] = useState("");
  const [content, setContent] = useState("");
  const [comments, setComments] = useState([]);


  useEffect(() => {
    axios.get('/api/thoughts')
      .then(response => {
        setThoughts(response.data);
      })
      .catch(error => {
        console.error(error);
      });
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newThought = {
      title,
      newskeyword,
      content,
    };
    const res = await axios.post("/api/thoughts", newThought);
    setThoughts(prevThoughts => [...prevThoughts, res.data]);
    setTitle("");
    setNewskeyword("");
    setContent("");
    getComments(res.data.id);
  };

  const handleComment = async (e, thought, comment, setComments) => {
    e.preventDefault();
    try {
      const response = await axios.post(`/api/thoughts/${thought.id}/comments`, {
        content: comment,
      });
      setComments([...thought.comments, response.data]);
    } catch (error) {
      console.error(error);
      console.log('error occured!');
    }
  };

  const getComments = async (thoughtId) => {
    try {
      const response = await axios.get(`/api/thoughts/${thoughtId}/comments`);
      setThoughts(prevThoughts =>
        prevThoughts.map(thought => {
          if (thought.id === thoughtId) {
            return {
              ...thought,
              comments: response.data,
            };
          } else {
            return thought;
          }
        })
      );
    } catch (error) {
      console.error(error);
    }
  };

  function handleDelete(thoughtid) {
    axios.delete(`/api/thoughts/${thoughtid}`)
      .then(response => {
        setThoughts(prevThoughts => prevThoughts.filter(thought => thought.id !== thoughtid));
      })
      .catch(error => {
        console.error(error);
      });
  }

  return (
    <>
      <Head>
        <title>Your THOUGHT on NEWS</title>
        <meta
          name="description"
          content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          href="/favicon.ico" />
      </Head>

      <div className={`${styles.wrapper} ${styles.home_wrapper}`}>
        <h1 className={`${styles.home_page_ttl} ${styles.page_ttl}`}>
          Your THOUGHT on NEWS
        </h1>

        <main className={`${styles.main} ${styles.home_main}`}>

          <div className={styles.home_main_left}>
            <div className={styles.home_main_left_cont}>
              <h2 className={styles.home_main_left_cont_heading}>
                List of your thoughts
              </h2>

              {thoughts.map((thought) => (
                <ThoughtComp
                  key={thought.id}
                  thought={thought}
                  handleComment={handleComment}
                  handleDelete={() => handleDelete(thought.id)}
                  setComments={setComments} // pass setComments as a prop
                />
              ))}
            </div>
          </div>

          <div className={styles.home_main_right}>
            <div className={styles.home_main_right_cont}>
              <h2 className={styles.home_main_right_cont_heading}>
                  Share your thought on NEWS
              </h2>

              <h3 className={styles.home_main_right_cont_formTtl}>
                Choose your news first
              </h3>

              <form
                onSubmit={handleSubmit}
                className={styles.home_main_right_cont_form}>

                <label className={styles.home_main_right_cont_form_label}>
                  News Title:
                  <input
                    className={styles.home_main_right_cont_form_label_input}
                    type="text"
                    placeholder='name'
                    value={title}
                    onChange={(e) => setTitle(e.target.value)} />
                </label>

                <label className={styles.home_main_right_cont_form_label}>
                  News Keyword:
                  <input
                    className={styles.home_main_right_cont_form_label_input}
                    type="text"
                    value={newskeyword}
                    onChange={(e) => setNewskeyword(e.target.value)} />
                </label>

                <label className={styles.home_main_right_cont_form_label}>
                  Details:
                  <input
                    className={`${styles.home_main_right_cont_form_label_input} ${styles.home_main_right_cont_form_label_inputDetails}`}
                    type="text"
                    value={content}
                    onChange={(e) => setContent(e.target.value)} />
                </label>

                <button
                  type="submit"
                  className={styles.btn}
                  id="btn">
                    Save Thought
                  <span></span><span></span><span></span><span></span>
                </button>

              </form>
            </div>
          </div>
        </main>

      </div>
    </>
  )
}

function ThoughtComp({thought, handleComment, handleDelete, setComments}) {
  const [comment, setComment] = useState("");

  function handleSubmit(e) {
    e.preventDefault();
    handleComment(e, thought, comment);
    setComment(""); // reset comment state after submission
  }

  useEffect(() => {
    setComments(thought.comments || []);
  }, [thought.comments, setComments]);

  return (
    <div className={styles.thoughtCont}>
      <div className={styles.postContainer}>
        <div className={styles.postHeader}>
          <h2 className={styles.thoughtTitle}>
            {thought.title} <b>
            {thought.newskeyword}</b>
          </h2>
          <button className={styles.deleteButton} onClick={() => handleDelete(thought.id)}>Delete</button>

        </div>
        <p className={styles.thoughtContent}>
          {thought.content}
        </p>
      </div>

      <form
        className={styles.thoughtCont_form}
        onSubmit={(e) => {
          e.preventDefault();
          handleComment(e, thought, comment);
          setComment(""); // reset comment state after submission
        }}>
        <label className={styles.thoughtCont_form_label}>
          Comment:
          <input
            type="text"
            className={styles.thoughtCont_form_label_textarea}
            value={comment}
            onChange={(e) => setComment(e.target.value)} />
        </label>
        <button className={styles.commentButton} type="submit">Submit</button>
      </form>

      <ul className={styles.commentList}>
        {thought.comments && thought.comments.map((comment) => (
          <li
            key={comment.id}
            className={styles.commentItem}>- {comment.content}
          </li>
        ))}
      </ul>
    </div>
  );
}



export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if(!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
}
